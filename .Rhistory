install.packages("twitteR")
setwd("D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment")
ck <- "M1oBgJRaAD9RP2yv9w8AfKpWS"
cs <- "IPP29zqqouL54ivYFnocd8BYSjghAXM03605HZw1yIQTdZ6gFF"
at <- "43402714-OoFnBMF5LJrVQ2Y2VmAFaqaXsWzNUJC3lGsRCAwMk"
as <- "m5mglgRJWSO1RYa7Ar3W0LJIB6aBacCXAifynsGE5aQWo"
setup_twitter_oauth(ck, cs, access_token = at, access_secret = as)
require(twitteR)
setwd("D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment")
ck <- "M1oBgJRaAD9RP2yv9w8AfKpWS"
cs <- "IPP29zqqouL54ivYFnocd8BYSjghAXM03605HZw1yIQTdZ6gFF"
at <- "43402714-OoFnBMF5LJrVQ2Y2VmAFaqaXsWzNUJC3lGsRCAwMk"
as <- "m5mglgRJWSO1RYa7Ar3W0LJIB6aBacCXAifynsGE5aQWo"
setup_twitter_oauth(ck, cs, access_token = at, access_secret = as)
t_stream <- searchTwitter('blackpeopletwitter', resultType="recent", n=500)
df <- do.call("rbind", lapply(t_stream, as.data.frame))
View(df)
View(df)
my_columns <- subset(df, select=c("text","created","screenName","retweetCount","isRetweet","id"))
View(my_columns)
View(my_columns)
my_columns[,1] <- gsub('"',"",my_columns[,1])
write.table(my_columns, "tweets.csv", row.names = FALSE, col.names = TRUE, sep =";")
my_columns <- read.csv("tweets.csv", sep=";")
my_columns
my_columns[0]
characters = list();
for (val in my_columns[0]) {
characters[i] = i.length();
}
characters
for(i in my_column[0]:length(ind)){
characters[ind] <- i:length;
}
for(i in my_columns[0]:length(ind)){
characters[ind] <- i:length;
}
characters[0] <- "hi";
characters
characters[0]
characters[[0]] <- "hi";
my_columns[text][0]
my_columns[text$0]
my_columns[text]
characters <- list();
print(characters)
characters <- list();
characters[0] <- "test"
print(characters)
print(characters[0]
)
print(characters[0])
characters <- list();
characters[1] <- "test"
print(characters[1])
characters[1] <- NULL
nchar(my_columns$text)
nchar(my_columns$text[0])
my_columns$text
my_columns$text[[0]]
my_columns$text[[1]]
while(i<501) {
characters[i] <- nchar(my_columns$text[[i]]);
i <- i+1;
}
i<-1;
while(i<501) {
characters[i] <- nchar(my_columns$text[[i]]);
i <- i+1;
}
my_columns$text[[1]]
test <- toString(my_columns$text[[1]])
test
characters <- list();
i<-1;
while(i<501) {
characters[i] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
my_columns <- do.call("rbind", lapply(characters, as.data.frame))
my_columns <- subset(df, select=c("text","created","screenName","retweetCount","isRetweet","id"))
my_columns[,1] <- gsub('"',"",my_columns[,1])
my_columns <- cbind(my_columns, characters)
my_columns["characters"] <- characters
characters <- list();
i<-1;
while(i<501) {
characters[[i]] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
characters <- list();
i<-1;
while(i<501) {
characters[[i]] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
my_columns <- cbind(my_columns, characters)
characters <- list();
i<-1;
while(i<501) {
characters[[i]] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
my_columns <- subset(df, select=c("text","created","screenName","retweetCount","isRetweet","id"))
# we only need these columns for our analysis
my_columns[,1] <- gsub('"',"",my_columns[,1])
# before we can use the data frame in Access we need to delete all quotation marks from the text field
write.table(my_columns, "tweets.csv", row.names = FALSE, col.names = TRUE, sep =";")
# This saves the tweets as a csv-file that can be imported into Access.
my_columns <- read.csv("tweets.csv", sep=";")
# R Task 1 Begin (Create list that has the number of characters in each tweet as elements (research function "nchar"),
# then add the list as a column to the data frame and save the data frame to a new csv file)
characters <- list();
i<-1;
while(i<501) {
characters[[i]] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
my_columns$characters <- characters
t_stream <- searchTwitter('blackpeopletwitter', resultType="recent", n=500)
df <- do.call("rbind", lapply(t_stream, as.data.frame))
my_columns <- subset(df, select=c("text","created","screenName","retweetCount","isRetweet","id"))
my_columns[,1] <- gsub('"',"",my_columns[,1])
my_columns[,1] <- gsub('"',"",my_columns[,1])
write.table(my_columns, "tweets.csv", row.names = FALSE, col.names = TRUE, sep =";")
my_columns <- read.csv("tweets.csv", sep=";")
characters <- list();
i<-1;
while(i<501) {
characters[[i]] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
my_columns$characters <- characters
View(my_columns)
View(my_columns)
write.table(my_columns, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
write.table(my_columns, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
my_columns <- data.frame(lapply(my_columns, as.matrix), stringsAsFactors=FALSE)
write.table(my_columns, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
FALSE)
write.table(ass, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
ass <- data.frame(lapply(my_columns, as.matrix), stringsAsFactors=FALSE)
View(ass)
View(ass)
write.table(ass, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
ass <- data.frame(lapply(my_columns, as.character), stringsAsFactors=FALSE)
write.table(ass, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
my_columns <- subset(df, select=c("text","created","screenName","retweetCount","isRetweet","id"))
# we only need these columns for our analysis
my_columns[,1] <- gsub('"',"",my_columns[,1])
# before we can use the data frame in Access we need to delete all quotation marks from the text field
write.table(my_columns, "tweets.csv", row.names = FALSE, col.names = TRUE, sep =";")
# This saves the tweets as a csv-file that can be imported into Access.
my_columns <- read.csv("tweets.csv", sep=";")
# R Task 1 Begin (Create list that has the number of characters in each tweet as elements (research function "nchar"),
# then add the list as a column to the data frame and save the data frame to a new csv file)
characters <- list();
i<-1;
while(i<501) {
characters[[i]] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
my_columns$characters <- toJSON(characters)
#my_columns <- data.frame(lapply(my_columns, as.character), stringsAsFactors=FALSE)
write.table(ass, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
my_columns <- subset(df, select=c("text","created","screenName","retweetCount","isRetweet","id"))
# we only need these columns for our analysis
my_columns[,1] <- gsub('"',"",my_columns[,1])
# before we can use the data frame in Access we need to delete all quotation marks from the text field
write.table(my_columns, "tweets.csv", row.names = FALSE, col.names = TRUE, sep =";")
# This saves the tweets as a csv-file that can be imported into Access.
my_columns <- read.csv("tweets.csv", sep=";")
# R Task 1 Begin (Create list that has the number of characters in each tweet as elements (research function "nchar"),
# then add the list as a column to the data frame and save the data frame to a new csv file)
characters <- list();
i<-1;
while(i<501) {
characters[[i]] <- nchar(toString(my_columns$text[[i]]));
i <- i+1;
}
my_columns$characters <- toJSON(characters)
#my_columns <- data.frame(lapply(my_columns, as.character), stringsAsFactors=FALSE)
write.table(ass, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
write.table(my_columns1, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
my_columns$characters <- c(characters)
write.table(my_columns1, "tweetsAndLength.csv", row.names = FALSE, col.names = TRUE, sep =";")
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
console.log("done");
print("done");
View(ass)
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
my_columns$id[0]
print(my_columns$id[0])
print(my_columns$id[[0]])
print(my_columns$id[1])
if (my_columns$id[1])/2 == 0) {
print("vallah")
}
if (my_columns$id[1]/2 == 0) {
print("vallah")
}
if (my_columns$id[1]/2 == 1) {
print("vallah")
}
print(my_columns$id[1]/2)
if (my_columns$id[1]%2 == 0) {
print("vallah")
}
if (my_columns$id[1]%%2 == 0) {
print("vallah")
}
print(my_columns$id[1]%%2)
my_columns$id[2]%%2
my_columns$id[3]%%2
my_columns$id[4]%%2
my_columns$id[5]%%2
my_columns$id[6]%%2
if (is.even(my_columns$id[1])) {
print("vallah")
}
if (as.integer(my_columns$id[1]%2) == 1) {
print("vallah")
}
if (as.integer(my_columns$id[1]%%2) == 1) {
print("vallah")
}
if (as.integer(my_columns$id[1])%%2 == 1) {
print("vallah")
}
if (as.integer(my_columns$id[2])%%2 == 1) {
print("vallah")
}
if (my_columns$id[2]%%2 == 1) {
print("vallah")
}
if (my_columns$id[2]%%2 == 1) {
print("vallah")
}
print(substr(my_columns$id[2], length(my_columns$id[2])-4, length(my_columns$id[2])) )
print(substr(my_columns$id[2], length(my_columns$id[2])-4, last) )
substr("abcdef", 2, 4)
length(my_columns$id[2])-4
length(my_columns$id[2])
nchar(my_columns$id[2])
substr(my_columns$id[2], nchar(my_columns$id[2])-4, nchar(my_columns$id[2])
)
options("scipen" = 10)
options("scipen" = 50)
substr(my_columns$id[1], nchar(my_columns$id[1])-4, nchar(my_columns$id[1])
)
print("odd")
temp_df <- df
View(temp_df)
View(temp_df)
temp_df <- df
even_odd_list <- list()
j<-1;
while(j<501) {
# only taking last digits of ID to check if its odd for efficiency
if ( substr(my_columns$id[j], nchar(my_columns$id[j])-2, nchar(my_columns$id[j])) %% 2 == 0) {
characters[[j]] <- TRUE
} else {
characters[[j]] <- FALSE
}
}
even_odd_list <- unlist(even_odd_list, recursive = TRUE, use.names = TRUE)
temp_df$even_odd <- even_odd_list
while(j<501) {
# only taking last digits of ID to check if its odd for efficiency
if ( substr(my_columns$id[j], nchar(my_columns$id[j])-2, nchar(my_columns$id[j])) %% 2 == 0) {
characters[[j]] <- TRUE
} else {
characters[[j]] <- FALSE
}
}
substr(my_columns$id[j], nchar(my_columns$id[j])-2, nchar(my_columns$id[j]))
j
substr(my_columns$id[j], nchar(my_columns$id[j])-2, nchar(my_columns$id[j])) %% 2
as.numeric(substr(my_columns$id[j], nchar(my_columns$id[j])-2, nchar(my_columns$id[j])) %% 2)
as.numeric(substr(my_columns$id[j], nchar(my_columns$id[j])-2, nchar(my_columns$id[j])))
if ( substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1])) %% 2 == 0) {
characters[[j]] <- TRUE
} else {
characters[[j]] <- FALSE
}
substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1]))
as.numeric(substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1])))
temp_df <- df
even_odd_list <- list()
j<-1;
while(j<501) {
# only taking last digits of ID to check if its odd for efficiency
if ( as.numeric(substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1]))) %% 2 == 0) {
characters[[j]] <- TRUE
} else {
characters[[j]] <- FALSE
}
}
temp_df <- df
even_odd_list <- list()
j<-1;
while(j<501) {
# only taking last digits of ID to check if its odd for efficiency
if ( as.numeric(substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1]))) %% 2 == 0) {
characters[[j]] <- TRUE
} else {
characters[[j]] <- FALSE
}
j <- j+1
}
even_odd_list <- unlist(even_odd_list, recursive = TRUE, use.names = TRUE)
temp_df$even_odd <- even_odd_list
temp_df <- df
even_odd_list <- list()
j<-1;
while(j<501) {
# only taking last digits of ID to check if its odd for efficiency
if ( as.numeric(substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1]))) %% 2 == 0) {
characters[[j]] <- TRUE
} else {
characters[[j]] <- FALSE
}
j <- j+1
}
even_odd_list <- unlist(even_odd_list, recursive = TRUE, use.names = TRUE)
temp_df$even_odd <- even_odd_list
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
if ( as.numeric(substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1]))) %% 2 == 0) {
even_odd_list[[j]] <- TRUE
} else {
even_odd_list[[j]] <- FALSE
}
if ( as.numeric(substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1]))) %% 2 == 0) {
even_odd_list[[j]] <- TRUE
} else {
even_odd_list[[j]] <- FALSE
}
as.numeric(substr(my_columns$id[1], nchar(my_columns$id[1])-2, nchar(my_columns$id[1]))) %% 2
source('D:/Data/Dropbox/Dokumente/Unidokumente/Year 3/Trimester 8/BIM/bonus assignment/Script.R')
